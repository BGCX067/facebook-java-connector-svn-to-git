//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace Rage.Addservice.RemoteService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RemoteService.IPersistenceService")]
    public interface IPersistenceService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPersistenceService/GetUsers", ReplyAction="http://tempuri.org/IPersistenceService/GetUsersResponse")]
        System.IAsyncResult BeginGetUsers(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Rage.Addservice.Domain.Model.User> EndGetUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPersistenceService/Login", ReplyAction="http://tempuri.org/IPersistenceService/LoginResponse")]
        System.IAsyncResult BeginLogin(string login, string pass, System.AsyncCallback callback, object asyncState);
        
        Rage.Addservice.Domain.Model.User EndLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPersistenceService/CreateUser", ReplyAction="http://tempuri.org/IPersistenceService/CreateUserResponse")]
        System.IAsyncResult BeginCreateUser(Rage.Addservice.Domain.Model.User user, System.AsyncCallback callback, object asyncState);
        
        System.Nullable<int> EndCreateUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPersistenceService/UpdateUser", ReplyAction="http://tempuri.org/IPersistenceService/UpdateUserResponse")]
        System.IAsyncResult BeginUpdateUser(Rage.Addservice.Domain.Model.User user, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPersistenceService/IsLoggedIn", ReplyAction="http://tempuri.org/IPersistenceService/IsLoggedInResponse")]
        System.IAsyncResult BeginIsLoggedIn(System.AsyncCallback callback, object asyncState);
        
        Rage.Addservice.Domain.Model.User EndIsLoggedIn(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPersistenceService/GetAdverts", ReplyAction="http://tempuri.org/IPersistenceService/GetAdvertsResponse")]
        System.IAsyncResult BeginGetAdverts(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Rage.Addservice.Domain.Model.Advert> EndGetAdverts(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPersistenceService/GetAdvert", ReplyAction="http://tempuri.org/IPersistenceService/GetAdvertResponse")]
        System.IAsyncResult BeginGetAdvert(int advId, System.AsyncCallback callback, object asyncState);
        
        Rage.Addservice.Domain.Model.Advert EndGetAdvert(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPersistenceService/CreateAdvert", ReplyAction="http://tempuri.org/IPersistenceService/CreateAdvertResponse")]
        System.IAsyncResult BeginCreateAdvert(Rage.Addservice.Domain.Model.Advert advert, System.AsyncCallback callback, object asyncState);
        
        System.Nullable<int> EndCreateAdvert(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPersistenceService/GetAdvertStatus", ReplyAction="http://tempuri.org/IPersistenceService/GetAdvertStatusResponse")]
        System.IAsyncResult BeginGetAdvertStatus(int advId, System.AsyncCallback callback, object asyncState);
        
        Rage.Addservice.Domain.Model.AdvertStatus EndGetAdvertStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPersistenceService/GetWalls", ReplyAction="http://tempuri.org/IPersistenceService/GetWallsResponse")]
        System.IAsyncResult BeginGetWalls(System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.List<Rage.Addservice.Domain.Model.Wall> EndGetWalls(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPersistenceService/GetWall", ReplyAction="http://tempuri.org/IPersistenceService/GetWallResponse")]
        System.IAsyncResult BeginGetWall(int walId, System.AsyncCallback callback, object asyncState);
        
        Rage.Addservice.Domain.Model.Wall EndGetWall(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPersistenceServiceChannel : Rage.Addservice.RemoteService.IPersistenceService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Rage.Addservice.Domain.Model.User> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Rage.Addservice.Domain.Model.User>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Rage.Addservice.Domain.Model.User Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Rage.Addservice.Domain.Model.User)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Nullable<int> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Nullable<int>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsLoggedInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsLoggedInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Rage.Addservice.Domain.Model.User Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Rage.Addservice.Domain.Model.User)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAdvertsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAdvertsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Rage.Addservice.Domain.Model.Advert> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Rage.Addservice.Domain.Model.Advert>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAdvertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAdvertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Rage.Addservice.Domain.Model.Advert Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Rage.Addservice.Domain.Model.Advert)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateAdvertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateAdvertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Nullable<int> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Nullable<int>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetAdvertStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAdvertStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Rage.Addservice.Domain.Model.AdvertStatus Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Rage.Addservice.Domain.Model.AdvertStatus)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWallsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWallsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.List<Rage.Addservice.Domain.Model.Wall> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.List<Rage.Addservice.Domain.Model.Wall>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWallCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWallCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Rage.Addservice.Domain.Model.Wall Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Rage.Addservice.Domain.Model.Wall)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PersistenceServiceClient : System.ServiceModel.ClientBase<Rage.Addservice.RemoteService.IPersistenceService>, Rage.Addservice.RemoteService.IPersistenceService {
        
        private BeginOperationDelegate onBeginGetUsersDelegate;
        
        private EndOperationDelegate onEndGetUsersDelegate;
        
        private System.Threading.SendOrPostCallback onGetUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoginDelegate;
        
        private EndOperationDelegate onEndLoginDelegate;
        
        private System.Threading.SendOrPostCallback onLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateUserDelegate;
        
        private EndOperationDelegate onEndCreateUserDelegate;
        
        private System.Threading.SendOrPostCallback onCreateUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateUserDelegate;
        
        private EndOperationDelegate onEndUpdateUserDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsLoggedInDelegate;
        
        private EndOperationDelegate onEndIsLoggedInDelegate;
        
        private System.Threading.SendOrPostCallback onIsLoggedInCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAdvertsDelegate;
        
        private EndOperationDelegate onEndGetAdvertsDelegate;
        
        private System.Threading.SendOrPostCallback onGetAdvertsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAdvertDelegate;
        
        private EndOperationDelegate onEndGetAdvertDelegate;
        
        private System.Threading.SendOrPostCallback onGetAdvertCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateAdvertDelegate;
        
        private EndOperationDelegate onEndCreateAdvertDelegate;
        
        private System.Threading.SendOrPostCallback onCreateAdvertCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAdvertStatusDelegate;
        
        private EndOperationDelegate onEndGetAdvertStatusDelegate;
        
        private System.Threading.SendOrPostCallback onGetAdvertStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWallsDelegate;
        
        private EndOperationDelegate onEndGetWallsDelegate;
        
        private System.Threading.SendOrPostCallback onGetWallsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWallDelegate;
        
        private EndOperationDelegate onEndGetWallDelegate;
        
        private System.Threading.SendOrPostCallback onGetWallCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public PersistenceServiceClient() {
        }
        
        public PersistenceServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PersistenceServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PersistenceServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PersistenceServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetUsersCompletedEventArgs> GetUsersCompleted;
        
        public event System.EventHandler<LoginCompletedEventArgs> LoginCompleted;
        
        public event System.EventHandler<CreateUserCompletedEventArgs> CreateUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateUserCompleted;
        
        public event System.EventHandler<IsLoggedInCompletedEventArgs> IsLoggedInCompleted;
        
        public event System.EventHandler<GetAdvertsCompletedEventArgs> GetAdvertsCompleted;
        
        public event System.EventHandler<GetAdvertCompletedEventArgs> GetAdvertCompleted;
        
        public event System.EventHandler<CreateAdvertCompletedEventArgs> CreateAdvertCompleted;
        
        public event System.EventHandler<GetAdvertStatusCompletedEventArgs> GetAdvertStatusCompleted;
        
        public event System.EventHandler<GetWallsCompletedEventArgs> GetWallsCompleted;
        
        public event System.EventHandler<GetWallCompletedEventArgs> GetWallCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Rage.Addservice.RemoteService.IPersistenceService.BeginGetUsers(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUsers(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Rage.Addservice.Domain.Model.User> Rage.Addservice.RemoteService.IPersistenceService.EndGetUsers(System.IAsyncResult result) {
            return base.Channel.EndGetUsers(result);
        }
        
        private System.IAsyncResult OnBeginGetUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Rage.Addservice.RemoteService.IPersistenceService)(this)).BeginGetUsers(callback, asyncState);
        }
        
        private object[] OnEndGetUsers(System.IAsyncResult result) {
            System.Collections.Generic.List<Rage.Addservice.Domain.Model.User> retVal = ((Rage.Addservice.RemoteService.IPersistenceService)(this)).EndGetUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUsersCompleted(object state) {
            if ((this.GetUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUsersCompleted(this, new GetUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUsersAsync() {
            this.GetUsersAsync(null);
        }
        
        public void GetUsersAsync(object userState) {
            if ((this.onBeginGetUsersDelegate == null)) {
                this.onBeginGetUsersDelegate = new BeginOperationDelegate(this.OnBeginGetUsers);
            }
            if ((this.onEndGetUsersDelegate == null)) {
                this.onEndGetUsersDelegate = new EndOperationDelegate(this.OnEndGetUsers);
            }
            if ((this.onGetUsersCompletedDelegate == null)) {
                this.onGetUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUsersCompleted);
            }
            base.InvokeAsync(this.onBeginGetUsersDelegate, null, this.onEndGetUsersDelegate, this.onGetUsersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Rage.Addservice.RemoteService.IPersistenceService.BeginLogin(string login, string pass, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLogin(login, pass, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Rage.Addservice.Domain.Model.User Rage.Addservice.RemoteService.IPersistenceService.EndLogin(System.IAsyncResult result) {
            return base.Channel.EndLogin(result);
        }
        
        private System.IAsyncResult OnBeginLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string login = ((string)(inValues[0]));
            string pass = ((string)(inValues[1]));
            return ((Rage.Addservice.RemoteService.IPersistenceService)(this)).BeginLogin(login, pass, callback, asyncState);
        }
        
        private object[] OnEndLogin(System.IAsyncResult result) {
            Rage.Addservice.Domain.Model.User retVal = ((Rage.Addservice.RemoteService.IPersistenceService)(this)).EndLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoginCompleted(object state) {
            if ((this.LoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoginCompleted(this, new LoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoginAsync(string login, string pass) {
            this.LoginAsync(login, pass, null);
        }
        
        public void LoginAsync(string login, string pass, object userState) {
            if ((this.onBeginLoginDelegate == null)) {
                this.onBeginLoginDelegate = new BeginOperationDelegate(this.OnBeginLogin);
            }
            if ((this.onEndLoginDelegate == null)) {
                this.onEndLoginDelegate = new EndOperationDelegate(this.OnEndLogin);
            }
            if ((this.onLoginCompletedDelegate == null)) {
                this.onLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoginCompleted);
            }
            base.InvokeAsync(this.onBeginLoginDelegate, new object[] {
                        login,
                        pass}, this.onEndLoginDelegate, this.onLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Rage.Addservice.RemoteService.IPersistenceService.BeginCreateUser(Rage.Addservice.Domain.Model.User user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateUser(user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Nullable<int> Rage.Addservice.RemoteService.IPersistenceService.EndCreateUser(System.IAsyncResult result) {
            return base.Channel.EndCreateUser(result);
        }
        
        private System.IAsyncResult OnBeginCreateUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Rage.Addservice.Domain.Model.User user = ((Rage.Addservice.Domain.Model.User)(inValues[0]));
            return ((Rage.Addservice.RemoteService.IPersistenceService)(this)).BeginCreateUser(user, callback, asyncState);
        }
        
        private object[] OnEndCreateUser(System.IAsyncResult result) {
            System.Nullable<int> retVal = ((Rage.Addservice.RemoteService.IPersistenceService)(this)).EndCreateUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateUserCompleted(object state) {
            if ((this.CreateUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateUserCompleted(this, new CreateUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateUserAsync(Rage.Addservice.Domain.Model.User user) {
            this.CreateUserAsync(user, null);
        }
        
        public void CreateUserAsync(Rage.Addservice.Domain.Model.User user, object userState) {
            if ((this.onBeginCreateUserDelegate == null)) {
                this.onBeginCreateUserDelegate = new BeginOperationDelegate(this.OnBeginCreateUser);
            }
            if ((this.onEndCreateUserDelegate == null)) {
                this.onEndCreateUserDelegate = new EndOperationDelegate(this.OnEndCreateUser);
            }
            if ((this.onCreateUserCompletedDelegate == null)) {
                this.onCreateUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateUserCompleted);
            }
            base.InvokeAsync(this.onBeginCreateUserDelegate, new object[] {
                        user}, this.onEndCreateUserDelegate, this.onCreateUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Rage.Addservice.RemoteService.IPersistenceService.BeginUpdateUser(Rage.Addservice.Domain.Model.User user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateUser(user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void Rage.Addservice.RemoteService.IPersistenceService.EndUpdateUser(System.IAsyncResult result) {
            base.Channel.EndUpdateUser(result);
        }
        
        private System.IAsyncResult OnBeginUpdateUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Rage.Addservice.Domain.Model.User user = ((Rage.Addservice.Domain.Model.User)(inValues[0]));
            return ((Rage.Addservice.RemoteService.IPersistenceService)(this)).BeginUpdateUser(user, callback, asyncState);
        }
        
        private object[] OnEndUpdateUser(System.IAsyncResult result) {
            ((Rage.Addservice.RemoteService.IPersistenceService)(this)).EndUpdateUser(result);
            return null;
        }
        
        private void OnUpdateUserCompleted(object state) {
            if ((this.UpdateUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateUserAsync(Rage.Addservice.Domain.Model.User user) {
            this.UpdateUserAsync(user, null);
        }
        
        public void UpdateUserAsync(Rage.Addservice.Domain.Model.User user, object userState) {
            if ((this.onBeginUpdateUserDelegate == null)) {
                this.onBeginUpdateUserDelegate = new BeginOperationDelegate(this.OnBeginUpdateUser);
            }
            if ((this.onEndUpdateUserDelegate == null)) {
                this.onEndUpdateUserDelegate = new EndOperationDelegate(this.OnEndUpdateUser);
            }
            if ((this.onUpdateUserCompletedDelegate == null)) {
                this.onUpdateUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateUserCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateUserDelegate, new object[] {
                        user}, this.onEndUpdateUserDelegate, this.onUpdateUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Rage.Addservice.RemoteService.IPersistenceService.BeginIsLoggedIn(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsLoggedIn(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Rage.Addservice.Domain.Model.User Rage.Addservice.RemoteService.IPersistenceService.EndIsLoggedIn(System.IAsyncResult result) {
            return base.Channel.EndIsLoggedIn(result);
        }
        
        private System.IAsyncResult OnBeginIsLoggedIn(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Rage.Addservice.RemoteService.IPersistenceService)(this)).BeginIsLoggedIn(callback, asyncState);
        }
        
        private object[] OnEndIsLoggedIn(System.IAsyncResult result) {
            Rage.Addservice.Domain.Model.User retVal = ((Rage.Addservice.RemoteService.IPersistenceService)(this)).EndIsLoggedIn(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsLoggedInCompleted(object state) {
            if ((this.IsLoggedInCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsLoggedInCompleted(this, new IsLoggedInCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsLoggedInAsync() {
            this.IsLoggedInAsync(null);
        }
        
        public void IsLoggedInAsync(object userState) {
            if ((this.onBeginIsLoggedInDelegate == null)) {
                this.onBeginIsLoggedInDelegate = new BeginOperationDelegate(this.OnBeginIsLoggedIn);
            }
            if ((this.onEndIsLoggedInDelegate == null)) {
                this.onEndIsLoggedInDelegate = new EndOperationDelegate(this.OnEndIsLoggedIn);
            }
            if ((this.onIsLoggedInCompletedDelegate == null)) {
                this.onIsLoggedInCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsLoggedInCompleted);
            }
            base.InvokeAsync(this.onBeginIsLoggedInDelegate, null, this.onEndIsLoggedInDelegate, this.onIsLoggedInCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Rage.Addservice.RemoteService.IPersistenceService.BeginGetAdverts(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAdverts(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Rage.Addservice.Domain.Model.Advert> Rage.Addservice.RemoteService.IPersistenceService.EndGetAdverts(System.IAsyncResult result) {
            return base.Channel.EndGetAdverts(result);
        }
        
        private System.IAsyncResult OnBeginGetAdverts(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Rage.Addservice.RemoteService.IPersistenceService)(this)).BeginGetAdverts(callback, asyncState);
        }
        
        private object[] OnEndGetAdverts(System.IAsyncResult result) {
            System.Collections.Generic.List<Rage.Addservice.Domain.Model.Advert> retVal = ((Rage.Addservice.RemoteService.IPersistenceService)(this)).EndGetAdverts(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAdvertsCompleted(object state) {
            if ((this.GetAdvertsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAdvertsCompleted(this, new GetAdvertsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAdvertsAsync() {
            this.GetAdvertsAsync(null);
        }
        
        public void GetAdvertsAsync(object userState) {
            if ((this.onBeginGetAdvertsDelegate == null)) {
                this.onBeginGetAdvertsDelegate = new BeginOperationDelegate(this.OnBeginGetAdverts);
            }
            if ((this.onEndGetAdvertsDelegate == null)) {
                this.onEndGetAdvertsDelegate = new EndOperationDelegate(this.OnEndGetAdverts);
            }
            if ((this.onGetAdvertsCompletedDelegate == null)) {
                this.onGetAdvertsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAdvertsCompleted);
            }
            base.InvokeAsync(this.onBeginGetAdvertsDelegate, null, this.onEndGetAdvertsDelegate, this.onGetAdvertsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Rage.Addservice.RemoteService.IPersistenceService.BeginGetAdvert(int advId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAdvert(advId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Rage.Addservice.Domain.Model.Advert Rage.Addservice.RemoteService.IPersistenceService.EndGetAdvert(System.IAsyncResult result) {
            return base.Channel.EndGetAdvert(result);
        }
        
        private System.IAsyncResult OnBeginGetAdvert(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int advId = ((int)(inValues[0]));
            return ((Rage.Addservice.RemoteService.IPersistenceService)(this)).BeginGetAdvert(advId, callback, asyncState);
        }
        
        private object[] OnEndGetAdvert(System.IAsyncResult result) {
            Rage.Addservice.Domain.Model.Advert retVal = ((Rage.Addservice.RemoteService.IPersistenceService)(this)).EndGetAdvert(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAdvertCompleted(object state) {
            if ((this.GetAdvertCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAdvertCompleted(this, new GetAdvertCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAdvertAsync(int advId) {
            this.GetAdvertAsync(advId, null);
        }
        
        public void GetAdvertAsync(int advId, object userState) {
            if ((this.onBeginGetAdvertDelegate == null)) {
                this.onBeginGetAdvertDelegate = new BeginOperationDelegate(this.OnBeginGetAdvert);
            }
            if ((this.onEndGetAdvertDelegate == null)) {
                this.onEndGetAdvertDelegate = new EndOperationDelegate(this.OnEndGetAdvert);
            }
            if ((this.onGetAdvertCompletedDelegate == null)) {
                this.onGetAdvertCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAdvertCompleted);
            }
            base.InvokeAsync(this.onBeginGetAdvertDelegate, new object[] {
                        advId}, this.onEndGetAdvertDelegate, this.onGetAdvertCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Rage.Addservice.RemoteService.IPersistenceService.BeginCreateAdvert(Rage.Addservice.Domain.Model.Advert advert, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateAdvert(advert, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Nullable<int> Rage.Addservice.RemoteService.IPersistenceService.EndCreateAdvert(System.IAsyncResult result) {
            return base.Channel.EndCreateAdvert(result);
        }
        
        private System.IAsyncResult OnBeginCreateAdvert(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Rage.Addservice.Domain.Model.Advert advert = ((Rage.Addservice.Domain.Model.Advert)(inValues[0]));
            return ((Rage.Addservice.RemoteService.IPersistenceService)(this)).BeginCreateAdvert(advert, callback, asyncState);
        }
        
        private object[] OnEndCreateAdvert(System.IAsyncResult result) {
            System.Nullable<int> retVal = ((Rage.Addservice.RemoteService.IPersistenceService)(this)).EndCreateAdvert(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateAdvertCompleted(object state) {
            if ((this.CreateAdvertCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateAdvertCompleted(this, new CreateAdvertCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateAdvertAsync(Rage.Addservice.Domain.Model.Advert advert) {
            this.CreateAdvertAsync(advert, null);
        }
        
        public void CreateAdvertAsync(Rage.Addservice.Domain.Model.Advert advert, object userState) {
            if ((this.onBeginCreateAdvertDelegate == null)) {
                this.onBeginCreateAdvertDelegate = new BeginOperationDelegate(this.OnBeginCreateAdvert);
            }
            if ((this.onEndCreateAdvertDelegate == null)) {
                this.onEndCreateAdvertDelegate = new EndOperationDelegate(this.OnEndCreateAdvert);
            }
            if ((this.onCreateAdvertCompletedDelegate == null)) {
                this.onCreateAdvertCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateAdvertCompleted);
            }
            base.InvokeAsync(this.onBeginCreateAdvertDelegate, new object[] {
                        advert}, this.onEndCreateAdvertDelegate, this.onCreateAdvertCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Rage.Addservice.RemoteService.IPersistenceService.BeginGetAdvertStatus(int advId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAdvertStatus(advId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Rage.Addservice.Domain.Model.AdvertStatus Rage.Addservice.RemoteService.IPersistenceService.EndGetAdvertStatus(System.IAsyncResult result) {
            return base.Channel.EndGetAdvertStatus(result);
        }
        
        private System.IAsyncResult OnBeginGetAdvertStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int advId = ((int)(inValues[0]));
            return ((Rage.Addservice.RemoteService.IPersistenceService)(this)).BeginGetAdvertStatus(advId, callback, asyncState);
        }
        
        private object[] OnEndGetAdvertStatus(System.IAsyncResult result) {
            Rage.Addservice.Domain.Model.AdvertStatus retVal = ((Rage.Addservice.RemoteService.IPersistenceService)(this)).EndGetAdvertStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAdvertStatusCompleted(object state) {
            if ((this.GetAdvertStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAdvertStatusCompleted(this, new GetAdvertStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAdvertStatusAsync(int advId) {
            this.GetAdvertStatusAsync(advId, null);
        }
        
        public void GetAdvertStatusAsync(int advId, object userState) {
            if ((this.onBeginGetAdvertStatusDelegate == null)) {
                this.onBeginGetAdvertStatusDelegate = new BeginOperationDelegate(this.OnBeginGetAdvertStatus);
            }
            if ((this.onEndGetAdvertStatusDelegate == null)) {
                this.onEndGetAdvertStatusDelegate = new EndOperationDelegate(this.OnEndGetAdvertStatus);
            }
            if ((this.onGetAdvertStatusCompletedDelegate == null)) {
                this.onGetAdvertStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAdvertStatusCompleted);
            }
            base.InvokeAsync(this.onBeginGetAdvertStatusDelegate, new object[] {
                        advId}, this.onEndGetAdvertStatusDelegate, this.onGetAdvertStatusCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Rage.Addservice.RemoteService.IPersistenceService.BeginGetWalls(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWalls(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.List<Rage.Addservice.Domain.Model.Wall> Rage.Addservice.RemoteService.IPersistenceService.EndGetWalls(System.IAsyncResult result) {
            return base.Channel.EndGetWalls(result);
        }
        
        private System.IAsyncResult OnBeginGetWalls(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((Rage.Addservice.RemoteService.IPersistenceService)(this)).BeginGetWalls(callback, asyncState);
        }
        
        private object[] OnEndGetWalls(System.IAsyncResult result) {
            System.Collections.Generic.List<Rage.Addservice.Domain.Model.Wall> retVal = ((Rage.Addservice.RemoteService.IPersistenceService)(this)).EndGetWalls(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWallsCompleted(object state) {
            if ((this.GetWallsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWallsCompleted(this, new GetWallsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWallsAsync() {
            this.GetWallsAsync(null);
        }
        
        public void GetWallsAsync(object userState) {
            if ((this.onBeginGetWallsDelegate == null)) {
                this.onBeginGetWallsDelegate = new BeginOperationDelegate(this.OnBeginGetWalls);
            }
            if ((this.onEndGetWallsDelegate == null)) {
                this.onEndGetWallsDelegate = new EndOperationDelegate(this.OnEndGetWalls);
            }
            if ((this.onGetWallsCompletedDelegate == null)) {
                this.onGetWallsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWallsCompleted);
            }
            base.InvokeAsync(this.onBeginGetWallsDelegate, null, this.onEndGetWallsDelegate, this.onGetWallsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Rage.Addservice.RemoteService.IPersistenceService.BeginGetWall(int walId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWall(walId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Rage.Addservice.Domain.Model.Wall Rage.Addservice.RemoteService.IPersistenceService.EndGetWall(System.IAsyncResult result) {
            return base.Channel.EndGetWall(result);
        }
        
        private System.IAsyncResult OnBeginGetWall(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int walId = ((int)(inValues[0]));
            return ((Rage.Addservice.RemoteService.IPersistenceService)(this)).BeginGetWall(walId, callback, asyncState);
        }
        
        private object[] OnEndGetWall(System.IAsyncResult result) {
            Rage.Addservice.Domain.Model.Wall retVal = ((Rage.Addservice.RemoteService.IPersistenceService)(this)).EndGetWall(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWallCompleted(object state) {
            if ((this.GetWallCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWallCompleted(this, new GetWallCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWallAsync(int walId) {
            this.GetWallAsync(walId, null);
        }
        
        public void GetWallAsync(int walId, object userState) {
            if ((this.onBeginGetWallDelegate == null)) {
                this.onBeginGetWallDelegate = new BeginOperationDelegate(this.OnBeginGetWall);
            }
            if ((this.onEndGetWallDelegate == null)) {
                this.onEndGetWallDelegate = new EndOperationDelegate(this.OnEndGetWall);
            }
            if ((this.onGetWallCompletedDelegate == null)) {
                this.onGetWallCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWallCompleted);
            }
            base.InvokeAsync(this.onBeginGetWallDelegate, new object[] {
                        walId}, this.onEndGetWallDelegate, this.onGetWallCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Rage.Addservice.RemoteService.IPersistenceService CreateChannel() {
            return new PersistenceServiceClientChannel(this);
        }
        
        private class PersistenceServiceClientChannel : ChannelBase<Rage.Addservice.RemoteService.IPersistenceService>, Rage.Addservice.RemoteService.IPersistenceService {
            
            public PersistenceServiceClientChannel(System.ServiceModel.ClientBase<Rage.Addservice.RemoteService.IPersistenceService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetUsers(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetUsers", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Rage.Addservice.Domain.Model.User> EndGetUsers(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Rage.Addservice.Domain.Model.User> _result = ((System.Collections.Generic.List<Rage.Addservice.Domain.Model.User>)(base.EndInvoke("GetUsers", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLogin(string login, string pass, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = login;
                _args[1] = pass;
                System.IAsyncResult _result = base.BeginInvoke("Login", _args, callback, asyncState);
                return _result;
            }
            
            public Rage.Addservice.Domain.Model.User EndLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                Rage.Addservice.Domain.Model.User _result = ((Rage.Addservice.Domain.Model.User)(base.EndInvoke("Login", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateUser(Rage.Addservice.Domain.Model.User user, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = user;
                System.IAsyncResult _result = base.BeginInvoke("CreateUser", _args, callback, asyncState);
                return _result;
            }
            
            public System.Nullable<int> EndCreateUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Nullable<int> _result = ((System.Nullable<int>)(base.EndInvoke("CreateUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateUser(Rage.Addservice.Domain.Model.User user, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = user;
                System.IAsyncResult _result = base.BeginInvoke("UpdateUser", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateUser", _args, result);
            }
            
            public System.IAsyncResult BeginIsLoggedIn(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("IsLoggedIn", _args, callback, asyncState);
                return _result;
            }
            
            public Rage.Addservice.Domain.Model.User EndIsLoggedIn(System.IAsyncResult result) {
                object[] _args = new object[0];
                Rage.Addservice.Domain.Model.User _result = ((Rage.Addservice.Domain.Model.User)(base.EndInvoke("IsLoggedIn", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAdverts(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAdverts", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Rage.Addservice.Domain.Model.Advert> EndGetAdverts(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Rage.Addservice.Domain.Model.Advert> _result = ((System.Collections.Generic.List<Rage.Addservice.Domain.Model.Advert>)(base.EndInvoke("GetAdverts", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAdvert(int advId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = advId;
                System.IAsyncResult _result = base.BeginInvoke("GetAdvert", _args, callback, asyncState);
                return _result;
            }
            
            public Rage.Addservice.Domain.Model.Advert EndGetAdvert(System.IAsyncResult result) {
                object[] _args = new object[0];
                Rage.Addservice.Domain.Model.Advert _result = ((Rage.Addservice.Domain.Model.Advert)(base.EndInvoke("GetAdvert", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateAdvert(Rage.Addservice.Domain.Model.Advert advert, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = advert;
                System.IAsyncResult _result = base.BeginInvoke("CreateAdvert", _args, callback, asyncState);
                return _result;
            }
            
            public System.Nullable<int> EndCreateAdvert(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Nullable<int> _result = ((System.Nullable<int>)(base.EndInvoke("CreateAdvert", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAdvertStatus(int advId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = advId;
                System.IAsyncResult _result = base.BeginInvoke("GetAdvertStatus", _args, callback, asyncState);
                return _result;
            }
            
            public Rage.Addservice.Domain.Model.AdvertStatus EndGetAdvertStatus(System.IAsyncResult result) {
                object[] _args = new object[0];
                Rage.Addservice.Domain.Model.AdvertStatus _result = ((Rage.Addservice.Domain.Model.AdvertStatus)(base.EndInvoke("GetAdvertStatus", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetWalls(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetWalls", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.List<Rage.Addservice.Domain.Model.Wall> EndGetWalls(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.List<Rage.Addservice.Domain.Model.Wall> _result = ((System.Collections.Generic.List<Rage.Addservice.Domain.Model.Wall>)(base.EndInvoke("GetWalls", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetWall(int walId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = walId;
                System.IAsyncResult _result = base.BeginInvoke("GetWall", _args, callback, asyncState);
                return _result;
            }
            
            public Rage.Addservice.Domain.Model.Wall EndGetWall(System.IAsyncResult result) {
                object[] _args = new object[0];
                Rage.Addservice.Domain.Model.Wall _result = ((Rage.Addservice.Domain.Model.Wall)(base.EndInvoke("GetWall", _args, result)));
                return _result;
            }
        }
    }
}
